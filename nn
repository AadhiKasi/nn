# Right now I'm going to import the libraries
import numpy as np
# Will plot shit too lol

#Lowk j a tutorial on a basic neural network

import tensorflow as tf
from tensorflow import keras
import pandas as pd
import matplotlib.pyplot as plt
import random

# Load the dataset, got it from Google API
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
a = len(x_train)
print("Length of training dataset = %3.f" %a)
b = len(x_test)
print ("Length of testing dataset = %3.f" %b)

# Preprocessing data

x_train = x_train / 255
x_test = x_test / 255

# Time to make a model now
model = keras.Sequential()
keras.layers.Flatten(input_shape=(28, 28)),
keras.layers.Dense(128, activation='relu'),
keras.layers.Dense(10, activation='softmax')

model.summary()
#compile a model
model.compile(optimizer='sgd',
              loss='sparse_categorical_crossentrophy',
              metrics = ['accuracy']
              )
#Training

history = model.fit(x_train, y_train, validation_data=(x_test, y_test),epochs = 10)

#Evaluate the model
test_loss,test_acc=model.evaluate(x_test,y_test)
print("Loss=%.3f" %test_loss)
print("Accuracy = %3f" %test_acc)

#Making prediction on new dara

n=random.randint(0,9999)
plt.imshow(x_test[n])
plt.show()
#we use predict() on new data
predicted_value=model.predict(x_test)
print("Handwritting number in the image is= %d" %np.argmax(predicted_value[n]))
history.history.keys()

#plot accuracy

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

#graph

plt.plot(history.history['accuracy'])
plt.plot(history['val_accuracy'])
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Training Loss & Accuracy')
plt.ylabel('accuracy/loss')
plt.xlabel('epoch')
plt.legend(['accuracy','val_accuracy','loss','val_loss'])
plt.show()
